require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ShortenersController do

  render_views

  describe "GET show" do

    before(:each) do
      @shortener = Factory(:shortener)
    end

    it "should find the right shortener" do
      get :show, :id => @shortener
      assigns(:shortener).should == @shortener
    end

    it "should be a redirect" do
      @request.host = @shortener.read_attribute(:domain)
      get :show, :id => @shortener
      response.should be_redirect
    end

    it "should redirect to the shortened url" do
      @request.host = @shortener.read_attribute(:domain)
      get :show, :id => @shortener
      response.should redirect_to(@shortener.url)
    end
  end

  describe "POST 'create'" do

    describe "failure" do

      before(:each) do
        @attr = { :url => "" }
      end

      it "should not create a shortener" do
        lambda do
          post :create, :shortener => @attr
        end.should_not change(Shortener, :count)
      end

    end

    describe "success" do

      before(:each) do
        @attr = { :url => "http://www.abevoelker.com" }
      end

      it "should create a shortener" do
        lambda do
          post :create, :shortener => @attr
        end.should change(Shortener, :count).by(1)
      end
    end
  end
end
